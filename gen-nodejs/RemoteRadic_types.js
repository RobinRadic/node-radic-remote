//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof radic === 'undefined') {
  radic = {};
}
if (typeof radic.remote === 'undefined') {
  radic.remote = {};
}
ttypes.ErrorCode = {
  'INVALID_REQUEST' : 0,
  'INVALID_AUTHSTRING' : 1,
  'NOT_FOUND' : 2,
  'DOWNLOAD_ERROR' : 3,
  'FILE_ERROR' : 4,
  'NO_READ' : 5
};
radic.remote.EDataException = module.exports.EDataException = function(args) {
  Thrift.TException.call(this, "radic.remote.EDataException")
  this.name = "radic.remote.EDataException"
  this.code = null;
  this.errorMessage = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.errorMessage !== undefined) {
      this.errorMessage = args.errorMessage;
    }
  }
};
Thrift.inherits(radic.remote.EDataException, Thrift.TException);
radic.remote.EDataException.prototype.name = 'EDataException';
radic.remote.EDataException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

radic.remote.EDataException.prototype.write = function(output) {
  output.writeStructBegin('EDataException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 2);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

radic.remote.EAuthException = module.exports.EAuthException = function(args) {
  Thrift.TException.call(this, "radic.remote.EAuthException")
  this.name = "radic.remote.EAuthException"
  this.code = null;
  this.errorMessage = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.errorMessage !== undefined) {
      this.errorMessage = args.errorMessage;
    }
  }
};
Thrift.inherits(radic.remote.EAuthException, Thrift.TException);
radic.remote.EAuthException.prototype.name = 'EAuthException';
radic.remote.EAuthException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

radic.remote.EAuthException.prototype.write = function(output) {
  output.writeStructBegin('EAuthException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 2);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

radic.remote.ConsoleLine = module.exports.ConsoleLine = function(args) {
  this.timestamp = null;
  this.message = null;
  this.level = null;
  if (args) {
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
  }
};
radic.remote.ConsoleLine.prototype = {};
radic.remote.ConsoleLine.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.level = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

radic.remote.ConsoleLine.prototype.write = function(output) {
  output.writeStructBegin('ConsoleLine');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.STRING, 3);
    output.writeString(this.level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

radic.remote.ConsoleCommand = module.exports.ConsoleCommand = function(args) {
  this.command = null;
  this.stdout = null;
  this.exitCode = null;
  this.outputLines = null;
  if (args) {
    if (args.command !== undefined) {
      this.command = args.command;
    }
    if (args.stdout !== undefined) {
      this.stdout = args.stdout;
    }
    if (args.exitCode !== undefined) {
      this.exitCode = args.exitCode;
    }
    if (args.outputLines !== undefined) {
      this.outputLines = args.outputLines;
    }
  }
};
radic.remote.ConsoleCommand.prototype = {};
radic.remote.ConsoleCommand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stdout = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.exitCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.outputLines = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ConsoleLine();
          elem6.read(input);
          this.outputLines.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

radic.remote.ConsoleCommand.prototype.write = function(output) {
  output.writeStructBegin('ConsoleCommand');
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 1);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  if (this.stdout !== null && this.stdout !== undefined) {
    output.writeFieldBegin('stdout', Thrift.Type.STRING, 2);
    output.writeString(this.stdout);
    output.writeFieldEnd();
  }
  if (this.exitCode !== null && this.exitCode !== undefined) {
    output.writeFieldBegin('exitCode', Thrift.Type.I32, 3);
    output.writeI32(this.exitCode);
    output.writeFieldEnd();
  }
  if (this.outputLines !== null && this.outputLines !== undefined) {
    output.writeFieldBegin('outputLines', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.outputLines.length);
    for (var iter7 in this.outputLines)
    {
      if (this.outputLines.hasOwnProperty(iter7))
      {
        iter7 = this.outputLines[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

